//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagement.API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryEntities : DbContext
    {
        public InventoryEntities(String connString)
               : base(connString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<M_BankMaster> M_BankMaster { get; set; }
        public virtual DbSet<M_BarCodeMaster> M_BarCodeMaster { get; set; }
        public virtual DbSet<M_CatMaster> M_CatMaster { get; set; }
        public virtual DbSet<M_FiscalMaster> M_FiscalMaster { get; set; }
        public virtual DbSet<M_GroupMaster> M_GroupMaster { get; set; }
        public virtual DbSet<M_LedgerMaster> M_LedgerMaster { get; set; }
        public virtual DbSet<M_PayModeMaster> M_PayModeMaster { get; set; }
        public virtual DbSet<M_TaxMaster> M_TaxMaster { get; set; }
        public virtual DbSet<TrnStockJv> TrnStockJvs { get; set; }
        public virtual DbSet<M_NewHOVersionInfo> M_NewHOVersionInfo { get; set; }
        public virtual DbSet<M_SessnMaster> M_SessnMaster { get; set; }
        public virtual DbSet<TrnPayModeMaster> TrnPayModeMasters { get; set; }
        public virtual DbSet<M_SubCatMaster> M_SubCatMaster { get; set; }
        public virtual DbSet<M_CityStateMaster> M_CityStateMaster { get; set; }
        public virtual DbSet<M_StateDivMaster> M_StateDivMaster { get; set; }
        public virtual DbSet<M_InwardData> M_InwardData { get; set; }
        public virtual DbSet<M_InwardMain> M_InwardMain { get; set; }
        public virtual DbSet<M_InwardDetail> M_InwardDetail { get; set; }
        public virtual DbSet<V_MonthWiseSaleSummary> V_MonthWiseSaleSummary { get; set; }
        public virtual DbSet<V_MonthWiseSupplierPurchaseSummary> V_MonthWiseSupplierPurchaseSummary { get; set; }
        public virtual DbSet<TrnPartyOrderDetail> TrnPartyOrderDetails { get; set; }
        public virtual DbSet<TrnPartyOrderMain> TrnPartyOrderMains { get; set; }
        public virtual DbSet<Web_M_MenuMaster> Web_M_MenuMaster { get; set; }
        public virtual DbSet<M_ProductMaster> M_ProductMaster { get; set; }
        public virtual DbSet<TrnBillData> TrnBillDatas { get; set; }
        public virtual DbSet<TrnBillDetail> TrnBillDetails { get; set; }
        public virtual DbSet<TrnBillMain> TrnBillMains { get; set; }
        public virtual DbSet<M_CompanyMaster> M_CompanyMaster { get; set; }
        public virtual DbSet<V_CurrentStockDetailNotForStockist> V_CurrentStockDetailNotForStockist { get; set; }
        public virtual DbSet<Im_CurrentStock> Im_CurrentStock { get; set; }
        public virtual DbSet<TrnPayModeDetail> TrnPayModeDetails { get; set; }
        public virtual DbSet<Inv_TempUserMaster> Inv_TempUserMaster { get; set; }
        public virtual DbSet<TempSalesReturnDetail> TempSalesReturnDetails { get; set; }
        public virtual DbSet<TempSalesReturnMain> TempSalesReturnMains { get; set; }
        public virtual DbSet<M_ConfigMaster> M_ConfigMaster { get; set; }
        public virtual DbSet<TargetDetail> TargetDetails { get; set; }
        public virtual DbSet<TargetMaster> TargetMasters { get; set; }
        public virtual DbSet<TrnSalesReturnDetail> TrnSalesReturnDetails { get; set; }
        public virtual DbSet<TrnSalesReturnMain> TrnSalesReturnMains { get; set; }
        public virtual DbSet<TrnPurchaseReturnDetail> TrnPurchaseReturnDetails { get; set; }
        public virtual DbSet<TrnPurchaseReturnMain> TrnPurchaseReturnMains { get; set; }
        public virtual DbSet<TrnOrderDeliveryDetail> TrnOrderDeliveryDetails { get; set; }
        public virtual DbSet<OLDBillDetail> OLDBillDetails { get; set; }
        public virtual DbSet<OLDBillMain> OLDBillMains { get; set; }
        public virtual DbSet<MakeKit> MakeKits { get; set; }
        public virtual DbSet<M_CourierDetails> M_CourierDetails { get; set; }
        public virtual DbSet<WalletReq> WalletReqs { get; set; }
        public virtual DbSet<M_GrpPermissionMaster> M_GrpPermissionMaster { get; set; }
        public virtual DbSet<DeletedBillDetail> DeletedBillDetails { get; set; }
        public virtual DbSet<V_DeletedSaleSummary> V_DeletedSaleSummary { get; set; }
        public virtual DbSet<Web_M_UserPermissionMaster> Web_M_UserPermissionMaster { get; set; }
        public virtual DbSet<V_PartyBalance> V_PartyBalance { get; set; }
        public virtual DbSet<M_LogMaster> M_LogMaster { get; set; }
        public virtual DbSet<TrnVoucher> TrnVouchers { get; set; }
        public virtual DbSet<StockOrderWishlist> StockOrderWishlists { get; set; }
        public virtual DbSet<VisionOfferProduct> VisionOfferProducts { get; set; }
        public virtual DbSet<VisionOffer> VisionOffers { get; set; }
        public virtual DbSet<V_BillWiseSaleSummary> V_BillWiseSaleSummary { get; set; }
        public virtual DbSet<TrnSampleProduct> TrnSampleProducts { get; set; }
        public virtual DbSet<Inv_M_UserMaster> Inv_M_UserMaster { get; set; }
        public virtual DbSet<SendLoginSM> SendLoginSMS { get; set; }
        public virtual DbSet<M_CourierMaster> M_CourierMaster { get; set; }
    
        [DbFunction("InventoryEntities", "MonthWiseSummary")]
        public virtual IQueryable<MonthWiseSummary_Result> MonthWiseSummary(string partyCode, string rptType, string prodType)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            var rptTypeParameter = rptType != null ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(string));
    
            var prodTypeParameter = prodType != null ?
                new ObjectParameter("ProdType", prodType) :
                new ObjectParameter("ProdType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MonthWiseSummary_Result>("[InventoryEntities].[MonthWiseSummary](@PartyCode, @RptType, @ProdType)", partyCodeParameter, rptTypeParameter, prodTypeParameter);
        }
    
        [DbFunction("InventoryEntities", "OfferResult")]
        public virtual IQueryable<OfferResult_Result1> OfferResult(Nullable<int> sessID, Nullable<int> offerUID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(int));
    
            var offerUIDParameter = offerUID.HasValue ?
                new ObjectParameter("OfferUID", offerUID) :
                new ObjectParameter("OfferUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<OfferResult_Result1>("[InventoryEntities].[OfferResult](@SessID, @OfferUID)", sessIDParameter, offerUIDParameter);
        }
    
        public virtual ObjectResult<StockDetail_Result1> StockDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockDetail_Result1>("StockDetail", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WRDashboardSummary_Result> WRDashboardSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WRDashboardSummary_Result>("WRDashboardSummary");
        }
    
        public virtual ObjectResult<FrDashboardSummary_Result> FrDashboardSummary(string partyCode)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrDashboardSummary_Result>("FrDashboardSummary", partyCodeParameter);
        }
    
        public virtual ObjectResult<FranchiseOfferDetail_Result2> FranchiseOfferDetail(string partyCode)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FranchiseOfferDetail_Result2>("FranchiseOfferDetail", partyCodeParameter);
        }
    
        [DbFunction("InventoryEntities", "WalletReport")]
        public virtual IQueryable<WalletReport_Result1> WalletReport(string partyCode)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WalletReport_Result1>("[InventoryEntities].[WalletReport](@PartyCode)", partyCodeParameter);
        }
    
        [DbFunction("InventoryEntities", "ProductSummary")]
        public virtual IQueryable<ProductSummary_Result> ProductSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ProductSummary_Result>("[InventoryEntities].[ProductSummary](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    }
}
